userstory_prompt = (
    "As an AI Assistant, you are an expert in creating structured and detailed test cases for software development. Based on the given topic, generate one positive test case and one negative test case, including the following elements for each:\n"
    "1. **Test Case Name**: Provide a concise and descriptive name for the test case.\n"
    "2. **Test Objective**: Clearly state the purpose and what this test case aims to validate or achieve.\n"
    "3. **Preconditions**: List any setup conditions or requirements that must be met before executing this test case.\n"
    "4. **Test Steps**: Outline each step to be performed during the test execution, with clear and sequential actions.\n"
    "5. **Expected Results**: Describe the expected outcome for each test step.\n"
    "6. **Postconditions**: State what conditions should be met or actions performed after test execution, if any.\n"
    "Input: {userinput}\n\n"
    "Output: Generate a structured response with each section clearly formatted using pipe symbols for both test cases:\n"
    "*Positive Test Case - TestCaseName:<value>|TestObjective:<value>|Preconditions:<value>|TestSteps:<value>|ExpectedResults:<value>|Postconditions:<value>*\n"
    "*Negative Test Case - TestCaseName:<value>|TestObjective:<value>|Preconditions:<value>|TestSteps:<value>|ExpectedResults:<value>|Postconditions:<value>*"
)


# Sample output from the LLM
testcase_output = """
Positive Test Case = TestCaseName:ValidSSOLogin|TestObjective:To verify that a user can successfully log in using Single Sign-On (SSO) and access the application without additional logins.|Preconditions:1. User has an active corporate account with valid SSO credentials. 2. User is connected to a network with normal conditions.|TestSteps:1. Open the application login page. 2. Click on the "Log in with SSO" option. 3. Enter valid credentials on the SSO provider's authentication page. 4. Click "Log In" or "Submit."|ExpectedResults:1. The application login page displays an option for "Log in with SSO." 2. The user is redirected to the SSO providerâ€™s authentication page. 3. The SSO provider accepts the corporate credentials. 4. The user is redirected back to the application and gains access without additional login prompts.|Postconditions:User is logged into the application, and the session is maintained across multiple integrated services.|

Negative Test Case = TestCaseName:InvalidSSOLogin|TestObjective:To validate that an appropriate error message is displayed and the user is unable to log in with invalid corporate credentials.|Preconditions:1. User has an active corporate account but uses invalid SSO credentials. 2. User is connected to a network with normal conditions.|TestSteps:1. Open the application login page. 2. Click on the "Log in with SSO" option. 3. Enter invalid corporate credentials on the SSO provider's authentication page. 4. Click "Log In" or "Submit."|ExpectedResults:An error message is displayed.|Postconditions:User is unable to log in.
"""

# Split the test case output into positive and negative test cases
positive_tc, negative_tc = testcase_output.split("Negative Test Case = ")

# Extract details from the positive test case
def extract_test_case_details(tc):
    # Split based on identifiable separators
    details = {}
    details['name'] = tc.split("TestCaseName:")[1].split("|")[0]
    details['description'] = tc.split("TestObjective:")[1].split("|")[0]
    return details

# Extract details for positive and negative test cases
positive_details = extract_test_case_details(positive_tc)
negative_details = extract_test_case_details(negative_tc)

# Display extracted details
print("Positive Test Case Details:")
print(f"Name: {positive_details['name']}")
print(f"Description: {positive_details['description']}")

print("\nNegative Test Case Details:")
print(f"Name: {negative_details['name']}")
print(f"Description: {negative_details['description']}")
v

testcase_output = generate_testcase(userstory)
print("Test Case Output from LLM:", testcase_output)

if "Positive Test Case" in testcase_output and "Negative Test Case" in testcase_output:
    # Split the output into positive and negative test cases
    positive_tc, negative_tc = testcase_output.split("Negative Test Case = ")
    
    # Extract the test case name and description for positive test case
    positive_tc_name = positive_tc.split("TestCaseName:")[1].split("|")[0]
    positive_tc_desc = positive_tc.split("TestObjective:")[1].split("|")[0]

    # Extract the test case name and description for negative test case
    negative_tc_name = negative_tc.split("TestCaseName:")[1].split("|")[0]
    negative_tc_desc = negative_tc.split("TestObjective:")[1].split("|")[0]

    print("Extracted Positive Test Case Name:", positive_tc_name)
    print("Extracted Positive Test Case Description:", positive_tc_desc)
    print("Extracted Negative Test Case Name:", negative_tc_name)
    print("Extracted Negative Test Case Description:", negative_tc_desc)

else:
    # If the output does not contain both positive and negative test cases
    testcase_output = "No Valid Output from LLM"
    print(testcase_output)
